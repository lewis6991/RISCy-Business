#!/bin/bash

#----------------------------------------
# File: RUNME.sh
# Description: Bash script for automated testing
# Primary Author: Jack Barnes
# Other Contributors: Dominic Murphy
# Notes:
#----------------------------------------

main()
{
    if [ ${#} = "0" ]
    then
        RUN_PROC=1
    fi
    while [ "$1" != "" ]; do
        case $1 in
            (-h|--help)     usage;;
            (-a|--all)      RUN_PROC=1
                            RUN_IF=1
                            RUN_ID=1
                            RUN_EX=1
                            RUN_MEM=1
                            RUN_WB=1
                            RUN_PROC=1;;
            (-proc)         RUN_PROC=1;;
            (-if)           RUN_IF=1;;
            (-id)           RUN_ID=1;;
            (-ex)           RUN_EX=1;;
            (-mem)          RUN_MEM=1;;
            (-wb)           RUN_WB=1;;
            (-specific=*)   SPECIFIC=${1//"-specific="/};;
            (-gui)          GUI_VAR="+gui"
                            echo "Include GUI";;
            (-plusargs=*)   PLUSARGS=${1//"-plusargs="/};;
            (-*)            echo "Unknown argument. Try --help for information";;
            (*)             echo "No arguments defined";;
        esac
        shift
    done

    if [ -n "$SPECIFIC" ] then
        specific 
    fi
    if [ -n "$RUN_IF" ] then
        IF 
    fi
    if [ -n "$RUN_ID" ] then
        ID 
    fi
    if [ -n "$RUN_EX" ] then
        EX 
    fi
    if [ -n "$RUN_MEM" ] then
        MEM 
    fi
    if [ -n "$RUN_WB" ] then
        WB 
    fi
    if [ -n "$RUN_PROC" ] then
        proc 
    fi

    exit 0
}

usage()
{
    echo "
    -h,--help         Displays this message
    -a,--all          Runs all test conditions
    -proc (-gui)      Runs the top level processor test
    -if               Runs the instruction fetch tests
    -id               Runs the instruction decode tests
    -ex               Runs the execute tests
    -mem              Runs the memory tests
    -wb               Runs the write back tests
    -s,--specific=<module> (-gui)
                      Runs a singular test on 'module'
    -gui              Runs the top level processor test (With GUI)
     NO ARGUMENT      Runs the top level processor test (Without GUI)

    NOTE: Options in <> are required
          Options in () are optional

    -plusargs=\"\"      Include plusargs to any command to set arguments
                      within the testbench itself. Full list below.
                      Arguments can be chained by including a single
                      comma between them. Left blank if not set
    \"+START=10000\"
    \"+FINISH=10000\"
    \"+FINISH=10000\"
    "
    exit 1
}

proc()
{
    echo "##### Testing the entire processor"
    if [[ $PLUSARGS = *"+test"* ]]
    then
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS processor_tb.sv ../src/*.sv
    else
        for test in {1..4}
        do
            ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS "+test="$test processor_tb.sv ../src/*.sv
        done
    fi
    echo "##### Processor done"
}

IF()
{
    echo "##### Testing the IF stage"
    MODULES=(mux pcinc pc IF)

    for i in ${MODULES[@]};
    do
        echo "##### Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${i}_tb.sv ../src/${i}.sv
        echo "##### ${i}.sv done"
    done
}

ID()
{
    echo "##### Testing the ID stage"
    MODULES=(registers nleftshift signextend)

    for i in ${MODULES[@]};
    do
        echo "Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${i}_tb.sv ../src/${i}.sv
        echo "##### ${i}.sv done"
    done
}

EX()
{
    echo "##### Testing the EX stage"
    MODULES=(mux alu)

    for i in ${MODULES[@]};
    do
        echo "Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${i}_tb.sv ../src/${i}.sv
        echo "##### ${i}.sv done"
    done
}

MEM()
{
    echo "##### Testing the MEM stage"
    MODULES=(mux alu)

    for i in ${MODULES[@]};
    do
        echo "Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${i}_tb.sv ../src/${i}.sv
        echo "##### ${i}.sv done"
    done
}

WB()
{
    echo "##### Testing the WB stage"
    MODULES=(mux)

    for i in ${MODULES[@]};
    do
        echo "Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${i}_tb.sv ../src/${i}.sv
        echo "##### ${i}.sv done"
    done
}

specific()
{
    echo "Testing specific module: ${1}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+../src/ $PLUSARGS ${SPECIFIC}_tb.sv ../src/${SPECIFIC}.sv
    echo "##### ${1}.sv done"
}

NC_ARGS="+ncaccess+r -sv -w -q +nctimescale+1ns/10ps"
main "$@"






