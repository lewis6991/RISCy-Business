#!/bin/bash

#----------------------------------------
# File: RUNME.sh
# Description: Bash script for automated testing
# Primary Author: Jack Barnes
# Other Contributors: Dominic Murphy
# Notes:
#----------------------------------------

main()
{
    if [ ${#} = "0" ]
    then
        RUN_PROC=1
    fi
    while [ "$1" != "" ]; do
        case $1 in
            (-h|--help)     usage;;
            (-a|--all)      RUN_IF=1
                            RUN_ID=1
                            RUN_EX=1
                            RUN_MEM=1
                            RUN_WB=1
                            RUN_PROC=1;;
            (-proc)         RUN_PROC=1;;
            (-if)           RUN_IF=1;;
            (-id)           RUN_ID=1;;
            (-ex)           RUN_EX=1;;
            (-mem)          RUN_MEM=1;;
            (-wb)           RUN_WB=1;;
            (--specific=*)  SPECIFIC="$SPECIFIC ${1//"-specific="/}";;
            (-s=*)          SPECIFIC="$SPECIFIC ${1//"-s="/}";;
            (-gui)          GUI_VAR="+gui"
                            echo "Include GUI";;
            (-plusargs=*)   PLUSARGS=${1//"-plusargs="/};;
            (-*)            echo "Unknown argument. Try --help for information";;
            (*)             echo "No arguments defined";;
        esac
        shift
    done

    if [ -n "$SPECIFIC" ]
    then
        specific
    fi
    if [ -n "$RUN_IF" ]
    then
        MODULES=(mux pcinc pc IF)
        stages "IF"
    fi
    if [ -n "$RUN_ID" ]
    then
        MODULES=(registers nleftshift signextend)
        stages "ID"
    fi
    if [ -n "$RUN_EX" ]
    then
        MODULES=(mux alu EX)
        stages "EX"
    fi
    if [ -n "$RUN_MEM" ]
    then
        MODULES=(MEM)
        stages "MEM"
    fi
    if [ -n "$RUN_WB" ]
    then
        MODULES=(mux WB)
        stages "WB"
    fi
    if [ -n "$RUN_PROC" ]
    then
        proc
    fi

    echo -e "\n$summarytext" >> run.log
    echo -e "\n$summarytext"

    exit 0
}

usage()
{
    echo "
    -h,--help          Displays this message
    -a,--all           Runs all test conditions
    -proc              Runs the top level processor test
    -if                Runs the instruction fetch tests
    -id                Runs the instruction decode tests
    -ex                Runs the execute tests
    -mem               Runs the memory tests
    -wb                Runs the write back tests
    -s,--specific=\"\"   Runs a singular test on 'module'
    -gui               Runs the gui
     NO ARGUMENT       Runs the top level processor test (Without GUI)

    -plusargs=\"\"       Include plusargs to any command to set arguments
                       within the testbench itself. Full list below.
                       Arguments can be chained by including a single
                       comma between them. Left blank if not set
        \"+test=<>\"     Used within the top level processor to choose
                       the testcase
    "
    exit 1
}

proc()
{
    echo "##### Testing the entire processor"
    if [[ $PLUSARGS = *"+test"* ]]
    then
        ncverilog $NC_ARGS $GUI_VAR "+incdir+src/+test/" $PLUSARGS "test/processor_tb.sv" src/*.sv >> run.log
        if [ "$?" = "0" ]
        then
            summarytext=$"${summarytext}processor testcase ${PLUSARGS//"+test="/} .. PASS\n"
        else
            summarytext=$"${summarytext}processor testcase ${PLUSARGS//"+test="/} .. FAIL\n"
        fi
    else
        for test in {1..4}
        do
            ncverilog $NC_ARGS $GUI_VAR "+incdir+src/+test/" $PLUSARGS "+test="$test "test/processor_tb.sv" src/*.sv >> run.log
            if [ "$?" = "0" ]
            then
                summarytext="${summarytext}processor testcase $test .. PASS\n"
            else
                summarytext="${summarytext}processor testcase $test .. FAIL\n"
            fi
        done
    fi
    echo "##### Processor done"
}

stages()
{
    echo "##### Testing the $1 stage"
    for i in ${MODULES[@]};
    do
        echo "##### Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+src/ $PLUSARGS "test/${i}_tb.sv" src/${i}.sv >> run.log
        if [ "$?" = "0" ]
        then
            summarytext="${summarytext}$i .. PASS\n"
        else
            summarytext="${summarytext}$i .. FAIL\n"
        fi
        echo "##### ${i}.sv done"
    done
    echo "##### $1 stage done"
}

specific()
{
    for i in ${SPECIFIC[@]}
    do
        echo "##### Testing ${i}.sv"
        ncverilog $NC_ARGS $GUI_VAR +incdir+src/ $PLUSARGS "test/${i}_tb.sv" src/${i}.sv >> run.log
        if [ "$?" = "0" ]
        then
            summarytext="${summarytext}$i .. PASS\n"
        else
            summarytext="${summarytext}$i .. FAIL\n"
        fi
        echo "##### ${i}.sv done"
    done
}

echo 'run.log\n\n' > run.log
summarytext=""
NC_ARGS="+ncaccess+r -sv -w -q +nctimescale+1ns/10ps"
main "$@"






