#!/bin/bash

#----------------------------------------
# File: RUNME.sh
# Description: Bash script for automated testing
# Primary Author: Jack Barnes
# Other Contributors: Dominic Murphy
# Notes: Must be run on Hind to allow GCC cross compiler to be used.
#----------------------------------------

main()
{
    if [ $host != $hind ]
    then
        echo "Error: This script requires hind CAD server. Exiting..."
    #exit 1
    fi

    if [ ${#} = "0" ]
    then
        RUN_PROC=1
    fi
    while [ "$1" != "" ]; do
        case $1 in
            (-h|--help)     usage;;
            (-a|--all)      RUN_IF=1
                            RUN_ID=1
                            RUN_EX=1
                            RUN_MEM=1
                            RUN_WB=1
                            RUN_FU=1
                            RUN_BP=1
                            RUN_PROC=1;;
            (-proc)         RUN_PROC=1;;
            (-if)           RUN_IF=1;;
            (-id)           RUN_ID=1;;
            (-ex)           RUN_EX=1;;
            (-mem)          RUN_MEM=1;;
            (-wb)           RUN_WB=1;;
            (-fu)           RUN_FU=1;;
            (-bp)           RUN_BP=1;;
            (--specific=*)  SPECIFIC="$SPECIFIC ${1//"--specific="/}";;
            (-s=*)          SPECIFIC="$SPECIFIC ${1//"-s="/}";;
            (-gui)          GUI_VAR="+ncaccess+r +gui +tcl+processor.tcl"
                            echo "Include GUI";;
            (-q|--quiet)    QUIET=1;;
            (-v|--verbose)  VERBOSE=1;;
            (-plusargs=*)   PLUSARGS=${1//"-plusargs="/};;
            (-clk*)         CLOCK=${1//"-clk"/};;
            (-syn*)         RUN_SYN=1
                            SYNARGS=$1;;
            (-pnr*)         RUN_PNR=1
                            PNRARGS=$1;;
            (-no_check)     NCDEFAULT="$NCDEFAULT +define+no_check=1";;
            (-*)            echo "Unknown argument. Try --help for information";;
            (*)             echo "No arguments defined";;
        esac
        shift
    done

    #if [ -n "$PLUSARGS" ]
    #then
    #    myarray=($PLUSARGS)
    #    for element in "${myarray[@]}"
    #    do
    #        if [[ $element = *"clk_p"* ]]
    #        then
    #            echo "Outdated use of clk_p. Please see 'RUNME --help'"
    #            exit 1
    #        fi
    #    done
#
    #fi
    if [ -n "$CLOCK" ]
    then
        if [[ $CLOCK = *"="[0-9]* ]]
        then
            CLKARGS=${CLOCK//"="/}
            CLKARGS=$(echo $CLKARGS | tr "-" " ")
            CLKARGS=$(echo $CLKARGS | tr "," " ")
            CLKARGS=($CLKARGS)
            if [ -n "${CLKARGS[1]}" ]
            then
                if [ -z "${CLKARGS[2]}" ]
                then
                    declare -i ac=${CLKARGS[0]}
                    declare -i bc=${CLKARGS[1]}
                    declare -i cc=($bc-$ac)/10
                    if [ $cc = "0" ]
                    then
                        cc="1"
                    fi
                    CLKARGS[2]=$cc
                else
                    if [ ${CLKARGS[2]} = "0" ]
                    then
                        CLKARGS[2]="1"
                    fi

                fi

                CLOCK=""
                for (( j=${CLKARGS[0]}; j<=${CLKARGS[1]}; j=j+${CLKARGS[2]} ))
                do
                    CLOCK=( ${CLOCK[@]} $j )
                done
            else
                CLOCK=${CLKARGS[0]}
            fi
        else
            echo "No clock period defined. Default period = 10ns"
            CLOCK="100"
        fi
    else
        echo "No clock period defined. Default period = 10ns"
        CLOCK="100"
    fi

    if [ -n "$SPECIFIC" ]
    then
        specific
    fi
    if [ -n "$RUN_IF" ]
    then
        MODULES=(pcinc pc)
        stages "IF"
    fi
    if [ -n "$RUN_ID" ]
    then
        MODULES=(decoder registers signextend)
        stages "ID"
    fi
    if [ -n "$RUN_EX" ]
    then
        MODULES=(alu acc_control ex_mult ex_control)
        stages "EX"
    fi
    if [ -n "$RUN_MEM" ]
    then
        MODULES=()
        stages "MEM"
    fi
    if [ -n "$RUN_WB" ]
    then
        MODULES=(mux muxthree)
        stages "WB"
    fi
    if [ -n "$RUN_FU" ]
    then
        MODULES=(FU)
        stages "FU"
    fi
    if [ -n "$RUN_BP" ]
    then
        MODULES=(BP)
        stages "BP"
    fi
    if [ -n "$RUN_PROC" ]
    then
        proc "## BEHAVIOURAL ##"
    fi
    if [ -n "$RUN_SYN" ]
    then
        if [[ $SYNARGS = *"-syn="* ]]
        then
            PROCLOC="test/enums.sv test/processor_tb.sv syn/work_${SYNARGS/-syn=/}/processor_synth.v syn/0.35um_Technologu_HDL_Files/*.v"
            NCARGS=$"$NCDEFAULT +define+SDF_FILE=syn/work_${SYNARGS/-syn=/}/design.sdf +define+scan=1"
            proc "## SYNTHESIS ##"
            NCARGS=$NCDEFAULT
        else
            summarytext=$"${summarytext} No -syn directory selected i.e. -syn=10opt
"
        fi
    fi
    if [ -n "$RUN_PNR" ]
    then
        if [[ $PNRARGS = *"-pnr="* ]]
        then
            PROCLOC="test/enums.sv test/processor_tb.sv syn/work_${PNRARGS/-pnr=/}/processor_net.v syn/0.35um_Technologu_HDL_Files/*.v"
            NCARGS=$"$NCDEFAULT +define+SDF_FILE=syn/work_${PNRARGS/-pnr=/}/processor.sdf +define+scan=1"
            proc "## PLACE & ROUTE ##"
            NCARGS=$NCDEFAULT
        else
            summarytext=$"${summarytext} No -pnr directory selected i.e. -pnr=10opt
"
        fi
    fi

    padding
    echo -e "$newtext" >> run.log
    coltext=${newtext//PASS/\\e[92mPASS\\e[39m}
    newtext=${coltext//FAIL/\\e[1;4;91mFAIL\\e[21;24;39m}
    echo -e "$newtext"

    exit 0
}

usage()
{
    echo "
    -h,--help          Displays this message
    -a,--all           Runs all test conditions
    -proc              Runs the top level processor test
    -if                Runs the instruction fetch tests
    -id                Runs the instruction decode tests
    -ex                Runs the execute tests
    -mem               Runs the memory tests
    -wb                Runs the write back tests
    -fu                Runs the forwarding unit test
    -bp                Runs the branch prediction test
    -s,--specific=\"\"   Runs a singular test on 'module'
    -gui               Runs the gui
    -q,--quiet         Runs the tests with little feedback.
                       Default case shows errors within module tests
    -syn               Runs the test cases on the synthesised design
    -pnr               Runs the test cases on the placed and routed design
    -no_check          Disables the checking of registers
     NO ARGUMENT       Runs the top level processor test (Without GUI)

    -clk=\"L\"           Used to set the clock period. If not set, a default
        =\"L-U\"         value of 10ns is chosen. A range can be set by
        =\"L-U,I\"       specifying the lowest (L) to the highest (H) clock
                       period, and the increment (I). If no increment is
                       given, the code will attempt to run test for 10
                       different periods.
                       NOTE: Specify in terms of 100ps i.e. 100 = 10ns

    -plusargs=\"\"       Include plusargs to any command to set arguments
                       within the testbench itself. Full list below.
                       Arguments can be chained by including a single
                       comma between them. Left blank if not set
        \"+test=<>\"     Used within the top level processor to choose
                       the testcase
    "
    exit 1
}

proc()
{
    echo "          $1"
    summarytext=$"${summarytext}$1
"
    echo "##### Testing the entire processor"
    if [[ $PLUSARGS = *"+test"* ]]
    then
        #PUT EACH CLOCK CASE HERE
        for i in "${CLOCK[@]}"
        do
            ncverilog $NCARGS $GUI_VAR "+incdir+src/+test/" $PLUSARGS "+clk_p=$i" $PROCLOC > temp.log
            if [ "$?" = "0" ]
            then
                summarytext=$"${summarytext}processor testcase ${PLUSARGS/+test=/}: .. PASS ($i)
"
                if [ -n "$VERBOSE" ]
                then
                    echo "INFO: Clock = $i"
                    echo "$(cat temp.log)"
                fi
                echo "$(cat temp.log)" >> run.log
                break
            else
                summarytext=$"${summarytext}processor testcase ${PLUSARGS/+test=/}: .. FAIL ($i)
"
                if [ -z "$QUIET" ]
                then
                    echo "INFO: Clock = $i"
                    echo "$(cat temp.log)"
                fi
            fi
            echo "$(cat temp.log)" >> run.log
        done
    else
        for test in {1..8}
        do
            #PUT EACH CLOCK CASE HERE
            for i in "${CLOCK[@]}"
            do
                ncverilog $NCARGS $GUI_VAR "+incdir+src/+test/" $PLUSARGS "+test="$test "+clk_p=$i" $PROCLOC > temp.log
                if [ "$?" = "0" ]
                then
                    summarytext="${summarytext}processor testcase $test .. PASS ($i)
"
                    if [ -n "$VERBOSE" ]
                    then
                        echo "INFO: Clock = $i"
                        echo "$(cat temp.log)"
                    fi
                    echo "$(cat temp.log)" >> run.log
                    break
                else
                    summarytext="${summarytext}processor testcase $test .. FAIL ($i)
"
                    if [ -z "$QUIET" ]
                    then
                        echo "INFO: Clock = $i"
                        echo "$(cat temp.log)"
                    fi
                fi
                echo "$(cat temp.log)" >> run.log
            done
        done
    fi
    echo "      .. done
"
    summarytext=$"${summarytext}
"
}

stages()
{
    echo "##### Testing the $1 stage"
    for i in ${MODULES[@]};
    do
        echo "  ### Testing ${i}.sv"
        #PUT EACH CLOCK CASE HERE
        for j in "${CLOCK[@]}"
        do
            templog=$(ncverilog $NCARGS $GUI_VAR +incdir+src/ $PLUSARGS "+clk_p=$j" "test/${i}_tb.sv" src/${i}.sv)
            if [ "$?" = "0" ]
            then
                summarytext="${summarytext}$i .. PASS ($j)
"
                if [ -n "$VERBOSE" ]
                then
                    echo "INFO: Clock = $j"
                    echo "$templog"
                fi
                echo "$templog" >> run.log
                break
            else
                summarytext="${summarytext}$i .. FAIL ($j)
"
                if [ -z "$QUIET" ]
                then
                    echo "INFO: Clock = $j"
                    echo "$templog"
                fi
            fi
            echo "$templog" >> run.log
            echo "      .. done"
        done
    done
    echo "##### .. done"
}

specific()
{
    for i in ${SPECIFIC[@]}
    do
        #PUT EACH CLOCK CASE HERE
        for j in "${CLOCK[@]}"
        do
            echo "INFO: Clock = $j"
            ncverilog $NCARGS $GUI_VAR +incdir+src/ $PLUSARGS "+clk_p=$j" "test/${i}_tb.sv" src/${i}.sv
            templog=$(ncverilog $NCARGS $GUI_VAR +incdir+src/ $PLUSARGS "+clk_p=$j" "test/${i}_tb.sv" src/${i}.sv)
            if [ "$?" = "0" ]
            then
                summarytext="${summarytext}$i .. PASS ($j)
"
                if [ -n "$VERBOSE" ]
                then
                    echo "##### Testing ${i}.sv"
                    echo "$templog"
                fi
                echo "$templog" >> run.log
                break
            else
                summarytext="${summarytext}$i .. FAIL ($j)
"
                if [ -z "$QUIET" ]
                then
                    echo "##### Testing ${i}.sv"
                    echo "$templog"
                fi
            fi
            echo "$templog" >> run.log
            echo "      .. done"
        done
    done
}

padding()
{
    while read a
    do
        DOTSFOUND=0
        for (( i=1; i<${#a}; i++ )); do
            if [ "${a:$i-1:1}" = "." ] && [ "${a:$i:1}" = "." ]
            then
                DOTSFOUND=1
                break
            fi
        done

        newtext="${newtext}${a:0:$i}"
        if [ "$DOTSFOUND" = "1" ]
        then
            for (( j=$i; j<=21; j++ ))
            do
                newtext="${newtext}."
            done
        fi
        newtext="${newtext}${a:$i:${#a}}\n"

    done <<< "$summarytext"
}

# Check if mips cross-compiler is avaiable. If not then adjust PATH variable.
if [[ ! $PATH =~ .*/opt/esdcad/cross/bin.* ]]; then
    export PATH=/opt/esdcad/cross/bin:$PATH
fi

# complib.so is needed for DPI functions called in the testbench. This library will compile asm files
# and provide an interface to fetch instructions.
if [ ! -f ./complib.so ]; then
    echo "Warning: complib.so library file not found, will compile it from source."
    gcc ../sw/complib.c -fPIC -shared -o complib.so -I /opt/cad/soft/cadence/ius/tools/inca/include
    #gcc ../sw/complib.c -c -o complib.so -I /opt/esdcad/software/synopsys/linux/vcs-mx_D-2009.12-5/include
fi

echo -e 'run.log
' > run.log
summarytext=""
newtext=""
PROCLOC="test/enums.sv test/processor_tb.sv src/*.sv"
NCDEFAULT="+nc64bit -sv -q +nctimescale+100ps/1fs -sv_lib complib.so"
NCARGS=$NCDEFAULT
host=`hostname`
hind="hind.ecs.soton.ac.uk"
main "$@"
