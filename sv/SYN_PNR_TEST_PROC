#!/bin/bash

#----------------------------------------
# File: SYN_PNR_TEST_PROC
# Description: Crude script to perform a clean, synthesis (basic), pnr and then test.
# Primary Author: Dominic Murphy
# Other Contributors:
# Notes:
#----------------------------------------

main()
{
if [ $host != $hind ]
then
    echo "Error: Synthesis and Testing requires hind CAD server. Exiting..."
    exit 1
fi

if [ $(echo $DISPLAY) = "" ]
then
    echo "Error: Display connection not mapped (Necessary for Place & Route tool).
          Run ssh with -Y argument. Exiting..."
    exit 1
fi

init ${@}
}

#iter lin opt basic 'CLKP'

init()
{
    SYNMODE="opt"

while [ "$1" != "" ]; do
    case $1 in
        (-h|--help)  usage;;
        ([0-9]*)     CLOCK=$1;;
        (iter)       RUN_ITER=1;;
        (lin)        RUN_LIN=1;;
        (opt)        RUN_OPT=1
                     SYNMODE=$1;;
        (basic)      RUN_BASIC=1
                     SYNMODE=$1;;
    esac
    shift
done

if [ -z "$CLOCK" ]
then
    echo "No clock period defined"
    exit 1
elif [ -n "$RUN_ITER" ] && [ -n "$RUN_LIN" ]
then
    echo "Both iter & lin defined"
    exit 1
elif [ -n "$RUN_OPT" ] && [ -n "$RUN_BASIC" ]
then
    echo "Both opt & basic defined"
    exit 1
fi

if [ -n "$RUN_ITER" ]
then
    iter_warn $SYNMODE $CLOCK
elif [ -n "$RUN_LIN" ]
then
    lin_warn $SYNMODE $CLOCK
else
    run $SYNMODE $CLOCK
    declare -i CLK_P=$CLOCK*10 #Done to align with timeunit.
    ./RUNME -pnr=$CLOCK$SYNMODE -clk=$CLK_P | tee syn/logs_$CLOCK$SYNMODE/run.log
    exit
fi
}

usage()
{
    echo "
    This script will perform the following:
    1. Clean out any existing synthesis and/or place & route files.
    2. Synthesise, then place & route the processor as it stands.
    3. Run the testing script, executing the test cases and printing the results.

    Depending on the design, optimisation settings and server usage, this could
    take a long time.

    -h,--help       Displays this message
    
    This script should be called in the following fashion:
    ./SYN_PNR_TEST_PROC TYPE CLK_PERIOD MODE

    TYPE       : [opt basic]
        opt    : Optimised Synthesis (Slow, but best results)
        basic  : Unoptimised Synthesis (Fast, but not optimal results)
    
    CLK_PERIOD : []
                 Any integer can be specified here to define the clock period (ns).
    
    MODE       : [iter lin]
        iter   : Specify 'iter' here to perform iteration. This will 
                 sequentially synthesise, place & route
                 and test for the best possible clock period.
        lin   : Specify 'lin' here to perform linear iteration. This will
                sequentially synthesise, place & route and test for clock periods
                from the specified down to 1ns.
"
    exit
}

run()
{
TYPE=$1
CLK_PERIOD=$2

cd syn
./RUN_SYN clean > /dev/null
./RUN_PNR clean > /dev/null
echo "Workspace cleaned"
echo "Beginning synthesis..."
./RUN_SYN $TYPE $CLK_PERIOD 1 # HARD CODED. REVISIT
echo "Synthesis complete"

echo "Beginning place & route..."
./RUN_PNR $TYPE $CLK_PERIOD
echo "Place & route complete"
echo "Running tests..."
cd ../
declare -i CLK_P=${CLK_PERIOD}*10 #Done to align with timeunit.
RESULTS=$(./RUNME -pnr=${CLK_PERIOD}${TYPE} -plusargs="+clk_p=${CLK_P}")
echo "$RESULTS"
echo "Tests complete."
}

lin_warn()
{
echo "
WARNING: lin has been specified. This will iterate the SYN, P&R and tests until 
a clock epriod of 1ns has been completed. Use with caution!
"

while true; do
    read -p "Do you wish to continue? " yn
    case $yn in
        [Yy]* ) lin $1 $2;;
        [Nn]* ) exit;;
        * ) echo "Please answer y or n.";;
    esac
done
}

lin()
{
#rm -rf logs >&/dev/null

declare -i CLK_PERIOD

CLK_PERIOD=$2
TYPE=$1

while true
do
    echo ""
    echo "Testing clock period of ${CLK_PERIOD}ns"
    run $TYPE $CLK_PERIOD
    grep "processor testcase" run.log
    TOTAL=$(grep "processor testcase" run.log | wc -l) >/dev/null
    PASSES=$(echo "$RESULTS" | tr ' ' '\n' | grep PASS | wc -l) >/dev/null
    echo "Tests conducted: $TOTAL"
    echo "Tests passed: $PASSES"
    CLK_PERIOD=$CLK_PERIOD-1
    if [ $CLK_PERIOD -eq 0 ]
    then
        echo ""
        echo "Clock period has reached 1ns. Check log files for details."
        exit
    fi
done
}

iter_warn()
{
echo "
WARNING: iter has been specified. This will begin a very long sequence of tests to find the clock
period of which the processor passes all tests.
This will take a VERY long time - you have been warned.
"

while true; do
    read -p "Do you wish to continue? " yn
    case $yn in
        [Yy]* ) iter $1 $2;;
        [Nn]* ) exit;;
        * ) echo "Please answer y or n.";;
    esac
done
}

iter()
{
#rm -rf logs >&/dev/null

declare -i CLK_PERIOD
declare -i CLK_PERIOD_MODIFIER

CLK_PERIOD=$2
CLK_PERIOD_MODIFIER=${CLK_PERIOD}/2
TYPE=$1

while true
do
    echo ""
    echo "Testing clock period of ${CLK_PERIOD}ns"
    run $TYPE $CLK_PERIOD
    grep "processor testcase" run.log
    TOTAL=$(grep "processor testcase" run.log | wc -l) >/dev/null
    PASSES=$(echo "$RESULTS" | tr ' ' '\n' | grep PASS | wc -l) >/dev/null
    echo "Tests conducted: $TOTAL"
    echo "Tests passed: $PASSES"
    if [ "$TOTAL" == "$PASSES" ]
    then
        echo ""
        CLK_PERIOD=${CLK_PERIOD}-${CLK_PERIOD_MODIFIER}
        CLK_PERIOD_MODIFIER=${CLK_PERIOD_MODIFIER}/2
    else
        echo ""
        CLK_PERIOD=${CLK_PERIOD}+${CLK_PERIOD_MODIFIER}
        CLK_PERIOD_MODIFIER=${CLK_PERIOD_MODIFIER}/2
    fi
    if [ $CLK_PERIOD_MODIFIER -eq 0 ]
    then
        echo ""
        echo "Clock period has converged to ${CLK_PERIOD}ns"
        if [ "$TOTAL" != "$PASSES" ]
        then
            echo "ERROR: Most recent test failed! Do not trust this clock period! Look at previous values"
        fi
        exit
    fi
done
}

host=`hostname`
hind="hind.ecs.soton.ac.uk"

if [ "$1" == "-h" ] || [ "$1" == "--help" ]
then
    usage
fi

main "$@"







